Ceil and floor and lca

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	node(int val){
	data=val;
	left=NULL;
	right=NULL;
}
};

int findceil(node* root,int value)
{
	int ceil=-1;
	while(root){
		
	if(root->data == value){
	ceil=root->data;
	return ceil;
}

	if(value > root->data)
	root=root->right;
	
	else{
	ceil=root->data;
	root=root->left;
}
}
	return ceil;
	
	
}


int findfloor(node* root,int value){
	int floor=-1;
	while(root){
		if(value == root->data)
		{
			floor=root->data;
			return floor;
		}
		
		if(value<root->data)
		root=root->left;
		
		else{
			floor=root->data;
			root=root->right;
		}
	}
	
	return floor;
}

int findLca(node* root,int n1,int n2)
{
	if(root == NULL)
	return 0;
	
	if(root->data <n1 && root->data<n2)
	return findLca(root->right,n1,n2);
	
	if(root->data>n1 && root->data>n2)
	return findLca(root->left,n1,n2);
	
}

int main()
{

    node* root = new node(8);
 
    root->left = new node(4);
    root->right = new node(12);
 
    root->left->left = new node(2);
    root->left->right = new node(6);
 
    root->right->left = new node(10);
    root->right->right = new node(14);
    
    cout<<findceil(root,7);
    cout<<"\n"<<findfloor(root,11);
    cout<<findLca(root,2,10);
}