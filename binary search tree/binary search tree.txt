Intro and insert

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	int count;

   node(int val)
   {
   data=val;
   left=NULL;
   right=NULL;
   count=1;
}
};

node* insert(node* &root,int value)
{
	if(root == NULL){
	root=new node(value);
	return root;
}

  if(value == root->data)
  {
  	(root->count)++;
  	return root;
  }

	
	if(value < root->data)
	insert(root->left,value);
	
	else
	insert(root->right,value);
	
	return root;
}

void inorder(node* root)
{
	if(root == NULL){
	return;
}
	
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
	
}


int main()
{
node* root=NULL;
insert(root,20);
insert(root,30);
insert(root,10);
insert(root,15);
insert(root,15);
insert(root,15);

inorder(root);

}

..............................................................................................
Ceil and floor and lca


#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	node(int val){
	data=val;
	left=NULL;
	right=NULL;
}
};

int findceil(node* root,int value)
{
	int ceil=-1;
	while(root){
		
	if(root->data == value){
	ceil=root->data;
	return ceil;
}

	if(value > root->data)
	root=root->right;
	
	else{
	ceil=root->data;
	root=root->left;
}
}
	return ceil;
	
	
}


int findfloor(node* root,int value){
	int floor=-1;
	while(root){
		if(value == root->data)
		{
			floor=root->data;
			return floor;
		}
		
		if(value<root->data)
		root=root->left;
		
		else{
			floor=root->data;
			root=root->right;
		}
	}
	
	return floor;
}

int findLca(node* root,int n1,int n2)
{
	if(root == NULL)
	return 0;
	
	if(root->data <n1 && root->data<n2)
	return findLca(root->right,n1,n2);
	
	if(root->data>n1 && root->data>n2)
	return findLca(root->left,n1,n2);
	
}

int main()
{

    node* root = new node(8);
 
    root->left = new node(4);
    root->right = new node(12);
 
    root->left->left = new node(2);
    root->left->right = new node(6);
 
    root->right->left = new node(10);
    root->right->right = new node(14);
    
    cout<<findceil(root,7);
    cout<<"\n"<<findfloor(root,11);
    cout<<findLca(root,2,10);
}
.............................................................................................
..........................................................................................
Kth smallest

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	int count;
	
	node(int val){
	data=val;
	left=NULL;
	right=NULL;
	count=1;
}
};
node* insert(node* &root,int value)
{
	if(root == NULL){
	root=new node(value);
	return root;
}
	
	if(value == root->data)
	{
		(root->count)++;
		return root ;
		
	}
	
	if(value<root->data)
	insert(root->left,value);
	
	else
	insert(root->right,value);
	return root;
}

void kthsmallestutil(node* root,int k,int &c)
{
	if(root==NULL || c>=k)
	return ;
	
	kthsmallestutil(root->left,k,c);
	c++;
	
	if(c==k)
	{
		cout<<"Kth smallest is: "<<root->data;
		return ;
	}
	kthsmallestutil(root->right,k,c);
}

void kthsmallest(node* root,int k)
{
	int c=0;
	kthsmallestutil(root,k,c);
}


	int main()
{

    node *root = NULL;
    insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
 
   int k=3;
   kthsmallest(root,k);
 
}
..............................................................................................
Check bst or not

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	int count;
	
	node(int val){
	data=val;
	left=NULL;
	right=NULL;
	count=1;
}
};

int isbstutil(node* root,int max,int min)
{
	if(root == NULL)
	return 1;
	
	if(root->data<min || root->data>max)
	return 0;
	
	return ((root->left,min,root->data)&&(root->right,root->data,max));
}

int isbst(node* root)
{
    return(isbstutil(root,INT_MAX,INT_MIN));	
}

int main()
{
    node *root = new node(4);
    root->left = new node(2);
    root->right = new node(5);
    root->left->left = new node(1);
    root->left->right = new node(3);
     
    if(isbst(root))
        cout<<"Is BST";
    else
        cout<<"Not a BST";
         
    return 0;
............................................................................................
