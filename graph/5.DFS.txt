
#include<bits/stdc++.h>
using namespace std;

template<typename T>
class Graph{
    map<T,list<T>> l;
    
    public:
void addEdge(T x,T y)
{
    l[x].push_back(y);
    l[y].push_back(x);
}
void dfsHelper(T src,map<T,bool> &visited)
{
    cout<<src<<" ";
    visited[src]=true;
    
    // Visit all the nbrs of src
    for(auto nbr:l[src])
    {
        if(!visited[nbr])
        {
            dfsHelper(nbr,visited);
        }
    }
    
}

void dfs(T src)
{
    map<T,bool> visited;
    //mark all the node as not visited
    for(auto node_pair:l){
    T node=node_pair.first;
    visited[node]=false;
    }
    
    dfsHelper(src,visited);
}
    
};

int main() {

	Graph<int> g;

	g.addEdge(0, 1);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	g.addEdge(3, 4);
	g.addEdge(4, 5);

	g.dfs(0);

}