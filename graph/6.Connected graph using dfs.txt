#include<bits/stdc++.h>
using namespace std;

template<typename T>
class Graph
{
    map<T,list<T>> l;
    public:
    void addEdge(T x,T y)
    {
        l[x].push_back(y);
        l[y].push_back(x);
    }
    
    void dfsHelper(T src,map<T,int> &visited){
        cout<<src<<" ";
        visited[src]=true;
        
        for(auto nbr:l[src])
        {
            if(!visited[nbr])
            dfsHelper(nbr,visited);
        }
    }
    void dfs()
    {
        map<T,int> visited;
        
        for(auto node_pair:l){
            T node=node_pair.first;
            visited[node]=false;
        }
       
       //iterate all over the vertices and call a dfs call
       int count=0;
       for(auto node_pair:l)
       {
           T node=node_pair.first;
           
           if(!visited[node])
           {
               cout<<"Component "<<count<<"->";
               dfsHelper(node,visited);
               count++;
               cout<<endl;
           }
           
       }
       
        
    }
    
};

int main() {

	Graph<int> g;

	g.addEdge(0, 1);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
    g.addEdge(3, 0);
    g.addEdge(0,4);
    
	g.addEdge(5, 6);
	g.addEdge(6, 7);
	
	g.addEdge(8, 8);

	 g.dfs();

}