
#include<bits/stdc++.h>
using namespace std;

class Graph{
    int V;
    list<int> *l;
    public:
    Graph(int V){
        this->V=V;
        l=new list<int>[V];
    }
    
    void addEdge(int x,int y,bool directed=true)
    {
        l[x].push_back(y);
        if(!directed){
        l[y].push_back(x);
        }
    }
    
    bool cycle_helper(int node,bool* visited,int parent)
    {
        visited[node]=true;
        for(auto nbr:l[node])
        {
            if(!visited[nbr])
            {
                bool cycle=cycle_helper(nbr,visited,node);
                if(cycle){
                return true;
                }
            }
            
            else if(nbr!=parent){
            return true;
            }
      
        }
        return false;
    }
    
    bool contain_cycle(){
        bool* visited=new bool[V];
        for(int i=0;i<V;i++)
        {
            visited[i]=false;
        }
        cycle_helper(0,visited,-1);
    }
};
int main() {

	Graph g(5);

	g.addEdge(0, 1);
	g.addEdge(1, 2);
	g.addEdge(2, 3);
	g.addEdge(3, 4);
	g.addEdge(4, 0);


	if( g.contain_cycle()){;
	cout<<"Yes,Cycle contain"<<endl;
	}
	else
	cout<<"No Cycle contain"<<endl;

}