Binary tree balanced or not (cond. for avl tree)
Time complex. :O(n^2)

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val){
		data=val;
		left=NULL;
		right=NULL;
		
	}
};


int height(node *root){
	if(root==NULL)
	return 0;
	
	int lheight=height(root->left);
	int rheight=height(root->right);
	
	return max(lheight,rheight)+1;
}

bool isBalanced(node* root){
	int lh;
	int rh;
	
	if(root == NULL)
	return 1;
	
	lh=height(root->left);
	rh=height(root->right);
	
	if(abs(lh-rh)<=1 && isBalanced(root->left) && isBalanced(root->right))
	return 1;
	
	return 0;
}

int main(){
	node* root=new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->left->left=new node(4);
	root->left->right=new node(5);
	root->right->left=new node(6);
	root->right->right=new node(7);
	
	cout<<height(root)<<"\n";
	
    if (isBalanced(root))
        cout << "Tree is balanced";
    else
        cout << "Tree is not balanced";
    return 0;
}