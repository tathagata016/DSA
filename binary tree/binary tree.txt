Intro to tree

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val)
	{
		data=val;
		left=NULL;
		right=NULL;
	}
};

node* root=NULL;

void inorder(node* root){
	if(root==NULL)
	return;
	
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}

 int main(){
 	node* root=new node(1);
 	root->left=new node(2);
 	root->right=new node(3);
 	root->left->left=new node(4);
 	root->left->right=new node(5);
 	root->right->left=new node(6);
 	root->right->right=new node(7);
 	
 	inorder(root);
 }
..............................................................................................
Total no of nodes,total sum of node and height of tree

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* right;
	node* left;
	
	node(int val)
	{
		data=val;
		right=NULL;
		left=NULL;
	}
};

node* root=NULL;
int count(node* root){
	
	if(root == NULL)
	return 0;
	
	return count(root->left)+count(root->right)+1 ;
}

int totsum(node* root){
	if(root== NULL)
	return 0;
	
	return totsum(root->left)+totsum(root->right)+root->data;
}

int height(node* root){
	if(root==NULL)
	return 0;
	
	int lheight=height(root->left);
	int rheight=height(root->right);
	
	return max(lheight,rheight)+1;
}
int main(){
 	node* root=new node(1);
 	root->left=new node(2);
 	root->right=new node(3);
 	root->left->left=new node(4);
 	root->left->right=new node(5);
 	root->right->left=new node(6);
 	root->right->right=new node(7);
 	
 	cout<<"\nNo of nodes in this tree: "<<count(root);
 	cout<<"\n Total sum of the node in this tree: "<<totsum(root);
 	cout<<"\n Height of this tree is: "<<height(root);
 }
.............................................................................................
 Convert a Binary Tree into Sum Tree 
 #include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* right;
	node* left;
	
	node(int val)
	{
		data=val;
		right=NULL;
		left=NULL;
	}
};
node* root=NULL;

int sumtree(node* root)
{
	if(root==NULL)
	return 0; 
	
	int lnode=sumtree(root->left);
	int rnode=sumtree(root->right);
	int x=root->data;
	root->data=lnode+rnode;
	
	return lnode+rnode+x;
	}
	
	int main(){
 	node* root=new node(1);
 	root->left=new node(2);
 	root->right=new node(3);
 	root->left->left=new node(4);
 	root->left->right=new node(5);
 	root->right->left=new node(6);
 	root->right->right=new node(7);
 	
 	cout<<sumtree(root);
 }
............................................................................................
Level order traversal

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val){
		data=val;
		left=NULL;
		right=NULL;
			
			}
};

void levelorder(node* root){
	if(root==NULL)
	return;
	
	queue<node*> q;
	
	q.push(root);
	
while(!q.empty()){
node* n=q.front();
cout<<n->data<" ";
q.pop();

if(n->left!=NULL)
q.push(n->left);
if(n->right!=NULL)
q.push(n->right);

}

}

int main(){
	node* root=new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->left->left=new node(4);
	root->left->right=new node(5);
	root->right->left=new node(6);
	root->right->right=new node(7);
	
	levelorder(root);
}
..............................................................................................
Binary tree symmetric or not

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val)
	{
		data=val;
		left=NULL;
		right=NULL;
	}
};

bool ismirror(node* root1,node* root2){
	
	if(root1==NULL && root2==NULL)
	return 1;
	
	if(root1 && root2 && root1->data==root2->data)
	{
		return(ismirror(root1->left,root2->right)&&ismirror(root1->right,root2->left));
	}
	
	return 0;

}

bool issymmetric(node* root){
	ismirror(root,root);
}

int main()
{
    // Let us construct the Tree shown in the above figure
    node* root = new node(1);
    root->left = new node(2);
    root->right = new node(2);
    root->left->left = new node(3);
    root->left->right = new node(4);
    root->right->left = new node(4);
    root->right->right = new node(3);

    if(issymmetric(root))
      cout<<"Symmetric";
    else
      cout<<"Not symmetric"; 
    return 0;
}
............................................................................................
Level order


#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val){
		data=val;
		left=NULL;
		right=NULL;
			
			}
};

void levelorder(node* root){
	if(root==NULL)
	return;
	
	queue<node*> q;
	
	q.push(root);
	
while(!q.empty()){
node* n=q.front();
cout<<n->data<" ";
q.pop();

if(n->left!=NULL)
q.push(n->left);
if(n->right!=NULL)
q.push(n->right);

}

}

int main(){
	node* root=new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->left->left=new node(4);
	root->left->right=new node(5);
	root->right->left=new node(6);
	root->right->right=new node(7);
	
	levelorder(root);
}


..............................................................................................
Boundary traversal

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val)
	{
		data=val;
		left=NULL;
		right=NULL;
	}
};

void printleaves(node* root)
{
	if(root==NULL)
	return;
	
	printleaves(root->left);
	if(!root->left && !root->right)
	cout<<root->data<<" ";
	printleaves(root->right);
	
}

void boundaryleft(node* root){
	if(root == NULL)
	return;
	
	if(root->left)
	{
	cout<<root->data<<" ";
	boundaryleft(root->left);
	
			}
	
	else if(root->right)
	{
	cout<<root->data<" ";
	boundaryleft(root->right);
}
}

void boundaryright(node* root){
	if(root==NULL)
	return;
	
		if(root->right){
		
		boundaryright(root->right);
		cout<<root->data<<" ";
	}
	
	else if(root->left)
	{

	boundaryleft(root->left);
		cout<<root->data<" ";
}
}

void boundary(node* root)
{
	if(root==NULL)
	return;
	
	cout<<root->data<<" ";
	
	boundaryleft(root->left);
	
	printleaves(root->left);
	printleaves(root->right);
	
	boundaryright(root->right);
}

int main()
{
	node* root = new node(20);
	root->left=new node(9);
    root->left->left = new node(4);
    root->left->left->left=new node(5);
    root->left->left->right=new node(6);
    root->left->right = new node(12);
    root->left->right->left = new node(10);
    root->left->right->right = new node(14);
    root->right = new node(22);
    root->right->right = new node(25);

    boundary(root);

    return 0;
}
.............................................................................................
Binary tree balanced or not (cond. for avl tree)
Time complex. :O(n^2)

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val){
		data=val;
		left=NULL;
		right=NULL;
		
	}
};


int height(node *root){
	if(root==NULL)
	return 0;
	
	int lheight=height(root->left);
	int rheight=height(root->right);
	
	return max(lheight,rheight)+1;
}

bool isBalanced(node* root){
	int lh;
	int rh;
	
	if(root == NULL)
	return 1;
	
	lh=height(root->left);
	rh=height(root->right);
	
	if(abs(lh-rh)<=1 && isBalanced(root->left) && isBalanced(root->right))
	return 1;
	
	return 0;
}

int main(){
	node* root=new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->left->left=new node(4);
	root->left->right=new node(5);
	root->right->left=new node(6);
	root->right->right=new node(7);
	
	cout<<height(root)<<"\n";
	
    if (isBalanced(root))
        cout << "Tree is balanced";
    else
        cout << "Tree is not balanced";
    return 0;
}
.............................................................................................
Check if a given Binary Tree is Heap

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val)
	{
		data=val;
		left=NULL;
		right=NULL;
	}
};
bool isHeap(node* root)
{
	if(root==NULL)
	return true;
	
	queue<node* > q;
	q.push(root);
	
	bool seen=false;
	while(!q.empty())
	{
	node* n=q.front();
	q.pop();
	
	if(n->left)
	{
		if(seen || n->left->data > n->data)
		return false;
		
	q.push(n->left);
		
	}
	
	else{
	seen =true;
}
	
	if(n->right)
	{
		if(seen || n->right->data > n->data)
		return false;
		
		q.push(n->right);
	}
	
	else {
	seen =true;
	
}
	
	}
	return true;
}
int main()
{
    node* root = NULL;
    root = new node(10);
    root->left = new node(9);
    root->right = new node(8);
    root->left->left = new node(7);
    root->left->right = new node(6);
    root->right->left = new node(5);
    root->right->right = new node(4);
    root->left->left->left = new node(3);
    root->left->left->right = new node(2);
   root->left->right->left = new node(1);
 
     //Function call
    if (isHeap(root))
        cout << "Given binary tree is a Heap\n";
    else
        cout << "Given binary tree is not a Heap\n";
 
    return 0;
}