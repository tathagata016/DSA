Binary tree symmetric or not

#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node* left;
	node* right;
	
	node(int val)
	{
		data=val;
		left=NULL;
		right=NULL;
	}
};

bool ismirror(node* root1,node* root2){
	
	if(root1==NULL && root2==NULL)
	return 1;
	
	if(root1 && root2 && root1->data==root2->data)
	{
		return(ismirror(root1->left,root2->right)&&ismirror(root1->right,root2->left));
	}
	
	return 0;

}

bool issymmetric(node* root){
	ismirror(root,root);
}

int main()
{
    // Let us construct the Tree shown in the above figure
    node* root = new node(1);
    root->left = new node(2);
    root->right = new node(2);
    root->left->left = new node(3);
    root->left->right = new node(4);
    root->right->left = new node(4);
    root->right->right = new node(3);

    if(issymmetric(root))
      cout<<"Symmetric";
    else
      cout<<"Not symmetric"; 
    return 0;
}