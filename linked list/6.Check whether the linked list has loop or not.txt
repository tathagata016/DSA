Check whether the linked list has loop or not
 
#include<bits/stdc++.h>
 using namespace std;
 
struct node{
	int data;
	node* link;
};

node* head=NULL;

void print(node* ptr){
	while(ptr!=NULL){
		cout<<ptr->data<<"->";
		ptr=ptr->link;
	}
	cout<<"NULL";
	
}


void push(node** head_ref,int new_data){
	node* new_node=new node;
	new_node->data=new_data;
	new_node->link=(*head_ref);
	*head_ref=new_node;
}

bool detectCycle(node* head)
{
	node* slow=head;
	node* fast=head;
   while(fast!=NULL && fast->link!=NULL)
	{
		slow=slow->link;
		fast=fast->link->link;
		
	
	if(slow==fast)
	 return true;
}
   return false;
}

 
 
int main()
{
    push(&head, 9);
    push(&head, 8);
    push(&head, 7);
    push(&head, 6);
    push(&head, 5);
    push(&head, 4);
    push(&head, 3);
    push(&head, 2);
    push(&head, 1);
 
    cout << "Given linked list \n";
    print(head);
    
     head->link->link->link->link->link =head->link;
     
     cout<<"\n";
     if(detectCycle(head))
     cout<<"Loop is there";
     else
     cout<<"No loop";
     
}